clear all
close all
clc
%$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$--参数和变量声明--$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
%$$$$$$$$$$$$$$$$$$$$$$$$--CRC_Block参数
mac_block_length=1888       	%MAC数据块长度
Cn=236;							%消息矩阵中每行有用消息个数236Byt
LaneNum=8;						%信息符号的行数，8路
BytNum=8;						%每个信息符号包含的比特数
%$$$$$$$$$$$$$$$$$$$$$$$$--CRC参数
L=Cn*8;                    		%一帧中的消息个数236*8bit
CrcBlkNum=Cn+3;
poly=[1 1 0 0 0 0 1 1 0 0 1 0 0 1 1 0 0 1 1 1 1 1 0 1 1];   %CRC生成多项式gcrc24a 
h = crc.generator('Polynomial',[1 1 0 0 0 0 1 1 0 0 1 0 0 1 1 0 0 1 1 1 1 1 0 1 1], 'InitialState', ...
'0x000000', 'ReflectInput', false, 'FinalXOR', '0x000000')
%$$$$$$$$$$$$$$$$$$$$$$$$--RS参数
msg_rs_fpga=[1	9	17	25	33	41	49	57	65	73	81	89	97	105	113	121	129	137	145	153	161	169	177	185	193	201	209	217	225	233	5	13	21	29	37	45	53	61	69	77	85	93	101	109	117	125	133	141	149	157	165	173	181	189	197	205	213	221	229	1	9	17	25	33	41	49	57	65	73	81	89	97	105	113	121	129	137	145	153	161	169	177	185	193	201	209	217	225	233	5	13	21	29	37	45	53	61	69	77	85	93	101	109	117	125	133	141	149	157	165	173	181	189	197	205	213	221	229	1	9	17	25	33	41	49	57	65	73	81	89	97	105	113	121	129	137	145	153	161	169	177	185	193	201	209	217	225	233	5	13	21	29	37	45	53	61	69	77	85	93	101	109	117	125	133	141	149	157	165	173	181	189	197	205	213	221	229	1	9	17	25	33	41	49	57	65	73	81	89	97	105	113	121	129	137	145	153	161	169	177	185	193	201	209	217	225	233	5	13	21	29	37	45	53	61	69	77	85	93	101	109	117	125	133	141	149	157	165	173	181	189	197	205	213	221	229	175	70	42  8   223 222 53  33  148 157 243 45  238 14  55  51  117 67  219
2	10	18	26	34	42	50	58	66	74	82	90	98	106	114	122	130	138	146	154	162	170	178	186	194	202	210	218	226	234	6	14	22	30	38	46	54	62	70	78	86	94	102	110	118	126	134	142	150	158	166	174	182	190	198	206	214	222	230	2	10	18	26	34	42	50	58	66	74	82	90	98	106	114	122	130	138	146	154	162	170	178	186	194	202	210	218	226	234	6	14	22	30	38	46	54	62	70	78	86	94	102	110	118	126	134	142	150	158	166	174	182	190	198	206	214	222	230	2	10	18	26	34	42	50	58	66	74	82	90	98	106	114	122	130	138	146	154	162	170	178	186	194	202	210	218	226	234	6	14	22	30	38	46	54	62	70	78	86	94	102	110	118	126	134	142	150	158	166	174	182	190	198	206	214	222	230	2	10	18	26	34	42	50	58	66	74	82	90	98	106	114	122	130	138	146	154	162	170	178	186	194	202	210	218	226	234	6	14	22	30	38	46	54	62	70	78	86	94	102	110	118	126	134	142	150	158	166	174	182	190	198	206	214	222	230	25	27  153 106 39  84  171 131 64  255 78  65  179 233 3   17  81  14  59
3	11	19	27	35	43	51	59	67	75	83	91	99	107	115	123	131	139	147	155	163	171	179	187	195	203	211	219	227	235	7	15	23	31	39	47	55	63	71	79	87	95	103	111	119	127	135	143	151	159	167	175	183	191	199	207	215	223	231	3	11	19	27	35	43	51	59	67	75	83	91	99	107	115	123	131	139	147	155	163	171	179	187	195	203	211	219	227	235	7	15	23	31	39	47	55	63	71	79	87	95	103	111	119	127	135	143	151	159	167	175	183	191	199	207	215	223	231	3	11	19	27	35	43	51	59	67	75	83	91	99	107	115	123	131	139	147	155	163	171	179	187	195	203	211	219	227	235	7	15	23	31	39	47	55	63	71	79	87	95	103	111	119	127	135	143	151	159	167	175	183	191	199	207	215	223	231	3	11	19	27	35	43	51	59	67	75	83	91	99	107	115	123	131	139	147	155	163	171	179	187	195	203	211	219	227	235	7	15	23	31	39	47	55	63	71	79	87	95	103	111	119	127	135	143	151	159	167	175	183	191	199	207	215	223	231	116	208 8   111 2   73  150 40  86  158 105 222 13  84  167 29  58  114 226
4	12	20	28	36	44	52	60	68	76	84	92	100	108	116	124	132	140	148	156	164	172	180	188	196	204	212	220	228	236	8	16	24	32	40	48	56	64	72	80	88	96	104	112	120	128	136	144	152	160	168	176	184	192	200	208	216	224	232	4	12	20	28	36	44	52	60	68	76	84	92	100	108	116	124	132	140	148	156	164	172	180	188	196	204	212	220	228	236	8	16	24	32	40	48	56	64	72	80	88	96	104	112	120	128	136	144	152	160	168	176	184	192	200	208	216	224	232	4	12	20	28	36	44	52	60	68	76	84	92	100	108	116	124	132	140	148	156	164	172	180	188	196	204	212	220	228	236	8	16	24	32	40	48	56	64	72	80	88	96	104	112	120	128	136	144	152	160	168	176	184	192	200	208	216	224	232	4	12	20	28	36	44	52	60	68	76	84	92	100	108	116	124	132	140	148	156	164	172	180	188	196	204	212	220	228	236	8	16	24	32	40	48	56	64	72	80	88	96	104	112	120	128	136	144	152	160	168	176	184	192	200	208	216	224	232	20	57  253 158 47  182 161 216 92  26  94  93  146 62  223 203 100 223 232
5	13	21	29	37	45	53	61	69	77	85	93	101	109	117	125	133	141	149	157	165	173	181	189	197	205	213	221	229	1	9	17	25	33	41	49	57	65	73	81	89	97	105	113	121	129	137	145	153	161	169	177	185	193	201	209	217	225	233	5	13	21	29	37	45	53	61	69	77	85	93	101	109	117	125	133	141	149	157	165	173	181	189	197	205	213	221	229	1	9	17	25	33	41	49	57	65	73	81	89	97	105	113	121	129	137	145	153	161	169	177	185	193	201	209	217	225	233	5	13	21	29	37	45	53	61	69	77	85	93	101	109	117	125	133	141	149	157	165	173	181	189	197	205	213	221	229	1	9	17	25	33	41	49	57	65	73	81	89	97	105	113	121	129	137	145	153	161	169	177	185	193	201	209	217	225	233	5	13	21	29	37	45	53	61	69	77	85	93	101	109	117	125	133	141	149	157	165	173	181	189	197	205	213	221	229	1	9	17	25	33	41	49	57	65	73	81	89	97	105	113	121	129	137	145	153	161	169	177	185	193	201	209	217	225	233	190	52	233 243 106 170 244 220 43  246 189 79  244 96  47  99  186 221 232
6	14	22	30	38	46	54	62	70	78	86	94	102	110	118	126	134	142	150	158	166	174	182	190	198	206	214	222	230	2	10	18	26	34	42	50	58	66	74	82	90	98	106	114	122	130	138	146	154	162	170	178	186	194	202	210	218	226	234	6	14	22	30	38	46	54	62	70	78	86	94	102	110	118	126	134	142	150	158	166	174	182	190	198	206	214	222	230	2	10	18	26	34	42	50	58	66	74	82	90	98	106	114	122	130	138	146	154	162	170	178	186	194	202	210	218	226	234	6	14	22	30	38	46	54	62	70	78	86	94	102	110	118	126	134	142	150	158	166	174	182	190	198	206	214	222	230	2	10	18	26	34	42	50	58	66	74	82	90	98	106	114	122	130	138	146	154	162	170	178	186	194	202	210	218	226	234	6	14	22	30	38	46	54	62	70	78	86	94	102	110	118	126	134	142	150	158	166	174	182	190	198	206	214	222	230	2	10	18	26	34	42	50	58	66	74	82	90	98	106	114	122	130	138	146	154	162	170	178	186	194	202	210	218	226	234	8 	105 90 	145 146 32  106 126 255 148 0 	35 	169 177 27  65 	158 144 8  
7	15	23	31	39	47	55	63	71	79	87	95	103	111	119	127	135	143	151	159	167	175	183	191	199	207	215	223	231	3	11	19	27	35	43	51	59	67	75	83	91	99	107	115	123	131	139	147	155	163	171	179	187	195	203	211	219	227	235	7	15	23	31	39	47	55	63	71	79	87	95	103	111	119	127	135	143	151	159	167	175	183	191	199	207	215	223	231	3	11	19	27	35	43	51	59	67	75	83	91	99	107	115	123	131	139	147	155	163	171	179	187	195	203	211	219	227	235	7	15	23	31	39	47	55	63	71	79	87	95	103	111	119	127	135	143	151	159	167	175	183	191	199	207	215	223	231	3	11	19	27	35	43	51	59	67	75	83	91	99	107	115	123	131	139	147	155	163	171	179	187	195	203	211	219	227	235	7	15	23	31	39	47	55	63	71	79	87	95	103	111	119	127	135	143	151	159	167	175	183	191	199	207	215	223	231	3	11	19	27	35	43	51	59	67	75	83	91	99	107	115	123	131	139	147	155	163	171	179	187	195	203	211	219	227	235	101	162	203 148 183 61  87  213 233 245 39  188 23  58  191 77  245 236 209
8	16	24	32	40	48	56	64	72	80	88	96	104	112	120	128	136	144	152	160	168	176	184	192	200	208	216	224	232	4	12	20	28	36	44	52	60	68	76	84	92	100	108	116	124	132	140	148	156	164	172	180	188	196	204	212	220	228	236	8	16	24	32	40	48	56	64	72	80	88	96	104	112	120	128	136	144	152	160	168	176	184	192	200	208	216	224	232	4	12	20	28	36	44	52	60	68	76	84	92	100	108	116	124	132	140	148	156	164	172	180	188	196	204	212	220	228	236	8	16	24	32	40	48	56	64	72	80	88	96	104	112	120	128	136	144	152	160	168	176	184	192	200	208	216	224	232	4	12	20	28	36	44	52	60	68	76	84	92	100	108	116	124	132	140	148	156	164	172	180	188	196	204	212	220	228	236	8	16	24	32	40	48	56	64	72	80	88	96	104	112	120	128	136	144	152	160	168	176	184	192	200	208	216	224	232	4	12	20	28	36	44	52	60	68	76	84	92	100	108	116	124	132	140	148	156	164	172	180	188	196	204	212	220	228	236	136	253	52	9	251	66	174	132	192	217	102	104	132	77	19	186	220	118	6]

RsBlkNum=255;					%码字长度
InfNum  =239;					%有用信息数
CheckNum=(RsBlkNum-InfNum)/2;	%码的纠错能力
%$$$$$$$$$$$$$$$$$$$$$$$$--intrlv参数
Qm=6;							%调制因子
E=2040;             			%编码消息比特长度
%$$$$$$$$$$$$$$$$$$$$$$$$--QAM参数
			%[0 1 2 3 4 5 6 7 8  9  10 11 12 13 141516 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63]
gray32		=[0 1 3 2 6 7 5 4 12 13 15 14 10 11 9 8 24 25 27 26 30 31 29 28 20 21 23 22 18 19 17 16 48 49 51 50 54 55 53 52 60 61 63 62 58 59 57 56 40 41 43 42 46 47 45 44 36 37 39 38 34 35 33 32];
grayinv32	=[0 1 3 2 7 6 4 5 15 14 12 13 8 9 11 10 31 30 28 29 24 25 27 26 16 17 19 18 23 22 20 21 63 62 60 61 56 57 59 58 48 49 51 50 55 54 52 53 32 33 35 34 39 38 36 37 47 46 44 45 40 41 43 42];
M = 2^Qm;
SymbNum=RsBlkNum*BytNum/Qm;
%$$$$$$$$$$$$$$$$$$$$$$$$--变量声明
msg_crc	=zeros(LaneNum,CrcBlkNum);		%生成8*239矩阵,用于存放加入crc验证码后的消息
msg_crc1=zeros(LaneNum,Cn);				%生成8*236矩阵,用于存放CRC分块后的消息
msg_rs	=zeros(LaneNum,RsBlkNum);		%生成8*255矩阵,用于存放加入RS验证码后的消息
msg_intrlv=zeros(LaneNum,RsBlkNum);		%生成8*255矩阵,用于存放交织后的消息
scrambler_out=zeros(LaneNum,RsBlkNum);	%生成8*255矩阵,用于存放扰码后的消息
msg_qam			 =zeros(LaneNum,SymbNum);%生成8*340矩阵,用于存放调制后的符号
msg_qam_AverPower=zeros(LaneNum,SymbNum);%生成8*340矩阵,用于存放调制后的归一化符号
%$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$--CRC_Block--$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
mac_block_base=(1:Cn); 			
mac_block_base_Lane	=kron(mac_block_base,ones(LaneNum,1));%MAC数据块生成
mac_block=reshape(mac_block_base_Lane.',1,LaneNum*Cn);%将LaneNum*Cn的矩阵变换成一位数组
A=zeros(LaneNum,Cn);			%生成8*236矩阵
k=1;
for i=1:Cn
	for j=1:LaneNum
		A(j,i) = mac_block(k);
		k=k+1;
	end
end
%$$$$$$$$$$$$$$$$$$$$$$$$$$$$$--layer1_transmit 8处理过程--$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
% msg_crc1=255*ones(1,Cn);      %消息生成
% msg_crc1=(1:Cn);       		%消息生成
msg_crc1=A;
for k=1:LaneNum
%$$$$$$$$$$$$$$$$$$$$$$$--CRC--$$$$$$$$$$$$$$$$$$$$$$$$$$
	msg_crc2=de2bi(double(msg_crc1(k,:)),'left-msb');	%转换为二进制
	msg_crc3=msg_crc2';              	%转置
	msg_crc4=reshape(msg_crc3,1,L);    	%转换成1*L的矩阵
	msg_crc5=msg_crc4';					%转置
	msg_crc6=generate(h,msg_crc5);  	%计算出带crc的消息块
	msg_crc7=reshape(msg_crc6,BytNum,CrcBlkNum);  		%转换成8*239的矩阵
	msg_crc8=msg_crc7';
	msg_crc9=bi2de(msg_crc8,'left-msb');%转换为10进制
	msg_crci=msg_crc9';
	msg_crc(k,:)=msg_crci;
%$$$$$$$$$$$$$$$$$$$$$$$$$$--RS--$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
	msg_rs1=msg_crc(k,:);					
	msg_rs2=gf(msg_rs1,BytNum);		%将信息符号变换到伽罗华域
	msg_rs3=rsenc(msg_rs2,RsBlkNum,InfNum).';			%RS(255,239)编码
	msg_rs4=reshape(msg_rs3,RsBlkNum,1).';
	msg_rsi=double(msg_rs4.x);		%将信息符号变换回普通域
	msg_rs(k,:)=msg_rsi;
	% msg_rs(k,:)= msg_rs_fpga(k,:)	%for fpga code
%$$$$$$$$$$$$$$$$$$$$$$$$--intrlv--$$$$$$$$$$$$$$$$$$$$$$$$$$$
	msg_intrlv1=msg_rs(k,:);%待交织的数据块
	msg_intrlv2=de2bi(double(msg_intrlv1),'left-msb');	%转换为二进制
	msg_intrlv3=msg_intrlv2';
	msg_intrlv4=reshape(msg_intrlv3,1,E);
	msg_intrlv5=reshape(msg_intrlv4,E/Qm,Qm).';	%中间变量
	msg_intrlv6=matintrlv(msg_intrlv4,Qm,E/Qm);	%矩阵交织
	msg_intrlv7=reshape(msg_intrlv6,BytNum,RsBlkNum);	%转换成8*255的矩阵
	msg_intrlv8=msg_intrlv7';
	msg_intrlv9=bi2de(msg_intrlv8,'left-msb');	%转换为10进制
	msg_intrlv(k,:)=msg_intrlv9';

%$$$$$$$$$$$$$$$$$$$$$$$--scrambler--$$$$$$$$$$$$$$$$$$$$$$$$$$
	Scrambler_input=msg_intrlv(k,:); 
	s=20255; 					%加扰初始化数值
	rand_data=zeros(size(Scrambler_input));
	for j=1:size(Scrambler_input,2);
		for i=1:8
			msb=bitxor(bitget(s,1),bitget(s,2));
			s=bitshift(s,-1);
			s=bitset(s,15,msb);
			t=bitxor(bitget(Scrambler_input(j),9-i),msb);
			rand_data(j)=bitset(rand_data(j),9-i,t);
		end
	end
	scrambler_out(k,:)=rand_data
%$$$$$$$$$$$$$$$$$$$$$$$$$$--QAM--$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
	msg_qam1= scrambler_out(k,:)';
	msg_qam2=de2bi(double(msg_qam1),'left-msb');	%转换为二进制
	msg_qam3=msg_qam2';
	msg_qam4=reshape(msg_qam3,1,E)
	msg_qam5=reshape(msg_qam4,Qm,E/Qm);
	msg_qam6=msg_qam5';
	msg_qam7=bi2de(double(msg_qam6),'left-msb');	%转换为十进制
	msg_qam8=msg_qam7';
	msg_qam9=gray32(msg_qam8+1);
	msg_qam(k,:) =qammod(msg_qam9,M);				%Gray映射
	msg_qam_AverPower(k,:) = qammod(msg_qam9,M,'UnitAveragePower',true);
end
% scatterplot(msg_qam);